

use libc::FILE;
use glib::*;


/* automatically generated by rust-bindgen */

pub enum Struct__PangoCoverage { }
pub type PangoCoverage = Struct__PangoCoverage;
pub const PANGO_COVERAGE_NONE: ::libc::c_uint = 0;
pub const PANGO_COVERAGE_FALLBACK: ::libc::c_uint = 1;
pub const PANGO_COVERAGE_APPROXIMATE: ::libc::c_uint = 2;
pub const PANGO_COVERAGE_EXACT: ::libc::c_uint = 3;
pub type PangoCoverageLevel = ::libc::c_uint;
pub type PangoLogAttr = Struct__PangoLogAttr;
pub enum Struct__PangoEngineLang { }
pub type PangoEngineLang = Struct__PangoEngineLang;
pub enum Struct__PangoEngineShape { }
pub type PangoEngineShape = Struct__PangoEngineShape;
pub enum Struct__PangoFont { }
pub type PangoFont = Struct__PangoFont;
pub enum Struct__PangoFontMap { }
pub type PangoFontMap = Struct__PangoFontMap;
pub type PangoRectangle = Struct__PangoRectangle;
pub type PangoGlyph = guint32;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__PangoRectangle {
    pub x: ::libc::c_int,
    pub y: ::libc::c_int,
    pub width: ::libc::c_int,
    pub height: ::libc::c_int,
}
impl ::std::clone::Clone for Struct__PangoRectangle {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__PangoRectangle {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub const PANGO_GRAVITY_SOUTH: ::libc::c_uint = 0;
pub const PANGO_GRAVITY_EAST: ::libc::c_uint = 1;
pub const PANGO_GRAVITY_NORTH: ::libc::c_uint = 2;
pub const PANGO_GRAVITY_WEST: ::libc::c_uint = 3;
pub const PANGO_GRAVITY_AUTO: ::libc::c_uint = 4;
pub type PangoGravity = ::libc::c_uint;
pub const PANGO_GRAVITY_HINT_NATURAL: ::libc::c_uint = 0;
pub const PANGO_GRAVITY_HINT_STRONG: ::libc::c_uint = 1;
pub const PANGO_GRAVITY_HINT_LINE: ::libc::c_uint = 2;
pub type PangoGravityHint = ::libc::c_uint;
pub type PangoMatrix = Struct__PangoMatrix;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__PangoMatrix {
    pub xx: ::libc::c_double,
    pub xy: ::libc::c_double,
    pub yx: ::libc::c_double,
    pub yy: ::libc::c_double,
    pub x0: ::libc::c_double,
    pub y0: ::libc::c_double,
}
impl ::std::clone::Clone for Struct__PangoMatrix {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__PangoMatrix {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum Struct__PangoScriptIter { }
pub type PangoScriptIter = Struct__PangoScriptIter;
pub const PANGO_SCRIPT_INVALID_CODE: ::libc::c_int = -1;
pub const PANGO_SCRIPT_COMMON: ::libc::c_int = 0;
pub const PANGO_SCRIPT_INHERITED: ::libc::c_int = 1;
pub const PANGO_SCRIPT_ARABIC: ::libc::c_int = 2;
pub const PANGO_SCRIPT_ARMENIAN: ::libc::c_int = 3;
pub const PANGO_SCRIPT_BENGALI: ::libc::c_int = 4;
pub const PANGO_SCRIPT_BOPOMOFO: ::libc::c_int = 5;
pub const PANGO_SCRIPT_CHEROKEE: ::libc::c_int = 6;
pub const PANGO_SCRIPT_COPTIC: ::libc::c_int = 7;
pub const PANGO_SCRIPT_CYRILLIC: ::libc::c_int = 8;
pub const PANGO_SCRIPT_DESERET: ::libc::c_int = 9;
pub const PANGO_SCRIPT_DEVANAGARI: ::libc::c_int = 10;
pub const PANGO_SCRIPT_ETHIOPIC: ::libc::c_int = 11;
pub const PANGO_SCRIPT_GEORGIAN: ::libc::c_int = 12;
pub const PANGO_SCRIPT_GOTHIC: ::libc::c_int = 13;
pub const PANGO_SCRIPT_GREEK: ::libc::c_int = 14;
pub const PANGO_SCRIPT_GUJARATI: ::libc::c_int = 15;
pub const PANGO_SCRIPT_GURMUKHI: ::libc::c_int = 16;
pub const PANGO_SCRIPT_HAN: ::libc::c_int = 17;
pub const PANGO_SCRIPT_HANGUL: ::libc::c_int = 18;
pub const PANGO_SCRIPT_HEBREW: ::libc::c_int = 19;
pub const PANGO_SCRIPT_HIRAGANA: ::libc::c_int = 20;
pub const PANGO_SCRIPT_KANNADA: ::libc::c_int = 21;
pub const PANGO_SCRIPT_KATAKANA: ::libc::c_int = 22;
pub const PANGO_SCRIPT_KHMER: ::libc::c_int = 23;
pub const PANGO_SCRIPT_LAO: ::libc::c_int = 24;
pub const PANGO_SCRIPT_LATIN: ::libc::c_int = 25;
pub const PANGO_SCRIPT_MALAYALAM: ::libc::c_int = 26;
pub const PANGO_SCRIPT_MONGOLIAN: ::libc::c_int = 27;
pub const PANGO_SCRIPT_MYANMAR: ::libc::c_int = 28;
pub const PANGO_SCRIPT_OGHAM: ::libc::c_int = 29;
pub const PANGO_SCRIPT_OLD_ITALIC: ::libc::c_int = 30;
pub const PANGO_SCRIPT_ORIYA: ::libc::c_int = 31;
pub const PANGO_SCRIPT_RUNIC: ::libc::c_int = 32;
pub const PANGO_SCRIPT_SINHALA: ::libc::c_int = 33;
pub const PANGO_SCRIPT_SYRIAC: ::libc::c_int = 34;
pub const PANGO_SCRIPT_TAMIL: ::libc::c_int = 35;
pub const PANGO_SCRIPT_TELUGU: ::libc::c_int = 36;
pub const PANGO_SCRIPT_THAANA: ::libc::c_int = 37;
pub const PANGO_SCRIPT_THAI: ::libc::c_int = 38;
pub const PANGO_SCRIPT_TIBETAN: ::libc::c_int = 39;
pub const PANGO_SCRIPT_CANADIAN_ABORIGINAL: ::libc::c_int = 40;
pub const PANGO_SCRIPT_YI: ::libc::c_int = 41;
pub const PANGO_SCRIPT_TAGALOG: ::libc::c_int = 42;
pub const PANGO_SCRIPT_HANUNOO: ::libc::c_int = 43;
pub const PANGO_SCRIPT_BUHID: ::libc::c_int = 44;
pub const PANGO_SCRIPT_TAGBANWA: ::libc::c_int = 45;
pub const PANGO_SCRIPT_BRAILLE: ::libc::c_int = 46;
pub const PANGO_SCRIPT_CYPRIOT: ::libc::c_int = 47;
pub const PANGO_SCRIPT_LIMBU: ::libc::c_int = 48;
pub const PANGO_SCRIPT_OSMANYA: ::libc::c_int = 49;
pub const PANGO_SCRIPT_SHAVIAN: ::libc::c_int = 50;
pub const PANGO_SCRIPT_LINEAR_B: ::libc::c_int = 51;
pub const PANGO_SCRIPT_TAI_LE: ::libc::c_int = 52;
pub const PANGO_SCRIPT_UGARITIC: ::libc::c_int = 53;
pub const PANGO_SCRIPT_NEW_TAI_LUE: ::libc::c_int = 54;
pub const PANGO_SCRIPT_BUGINESE: ::libc::c_int = 55;
pub const PANGO_SCRIPT_GLAGOLITIC: ::libc::c_int = 56;
pub const PANGO_SCRIPT_TIFINAGH: ::libc::c_int = 57;
pub const PANGO_SCRIPT_SYLOTI_NAGRI: ::libc::c_int = 58;
pub const PANGO_SCRIPT_OLD_PERSIAN: ::libc::c_int = 59;
pub const PANGO_SCRIPT_KHAROSHTHI: ::libc::c_int = 60;
pub const PANGO_SCRIPT_UNKNOWN: ::libc::c_int = 61;
pub const PANGO_SCRIPT_BALINESE: ::libc::c_int = 62;
pub const PANGO_SCRIPT_CUNEIFORM: ::libc::c_int = 63;
pub const PANGO_SCRIPT_PHOENICIAN: ::libc::c_int = 64;
pub const PANGO_SCRIPT_PHAGS_PA: ::libc::c_int = 65;
pub const PANGO_SCRIPT_NKO: ::libc::c_int = 66;
pub const PANGO_SCRIPT_KAYAH_LI: ::libc::c_int = 67;
pub const PANGO_SCRIPT_LEPCHA: ::libc::c_int = 68;
pub const PANGO_SCRIPT_REJANG: ::libc::c_int = 69;
pub const PANGO_SCRIPT_SUNDANESE: ::libc::c_int = 70;
pub const PANGO_SCRIPT_SAURASHTRA: ::libc::c_int = 71;
pub const PANGO_SCRIPT_CHAM: ::libc::c_int = 72;
pub const PANGO_SCRIPT_OL_CHIKI: ::libc::c_int = 73;
pub const PANGO_SCRIPT_VAI: ::libc::c_int = 74;
pub const PANGO_SCRIPT_CARIAN: ::libc::c_int = 75;
pub const PANGO_SCRIPT_LYCIAN: ::libc::c_int = 76;
pub const PANGO_SCRIPT_LYDIAN: ::libc::c_int = 77;
pub const PANGO_SCRIPT_BATAK: ::libc::c_int = 78;
pub const PANGO_SCRIPT_BRAHMI: ::libc::c_int = 79;
pub const PANGO_SCRIPT_MANDAIC: ::libc::c_int = 80;
pub const PANGO_SCRIPT_CHAKMA: ::libc::c_int = 81;
pub const PANGO_SCRIPT_MEROITIC_CURSIVE: ::libc::c_int = 82;
pub const PANGO_SCRIPT_MEROITIC_HIEROGLYPHS: ::libc::c_int = 83;
pub const PANGO_SCRIPT_MIAO: ::libc::c_int = 84;
pub const PANGO_SCRIPT_SHARADA: ::libc::c_int = 85;
pub const PANGO_SCRIPT_SORA_SOMPENG: ::libc::c_int = 86;
pub const PANGO_SCRIPT_TAKRI: ::libc::c_int = 87;
pub type PangoScript = ::libc::c_uint;
pub enum Struct__PangoLanguage { }
pub type PangoLanguage = Struct__PangoLanguage;
pub const PANGO_BIDI_TYPE_L: ::libc::c_uint = 0;
pub const PANGO_BIDI_TYPE_LRE: ::libc::c_uint = 1;
pub const PANGO_BIDI_TYPE_LRO: ::libc::c_uint = 2;
pub const PANGO_BIDI_TYPE_R: ::libc::c_uint = 3;
pub const PANGO_BIDI_TYPE_AL: ::libc::c_uint = 4;
pub const PANGO_BIDI_TYPE_RLE: ::libc::c_uint = 5;
pub const PANGO_BIDI_TYPE_RLO: ::libc::c_uint = 6;
pub const PANGO_BIDI_TYPE_PDF: ::libc::c_uint = 7;
pub const PANGO_BIDI_TYPE_EN: ::libc::c_uint = 8;
pub const PANGO_BIDI_TYPE_ES: ::libc::c_uint = 9;
pub const PANGO_BIDI_TYPE_ET: ::libc::c_uint = 10;
pub const PANGO_BIDI_TYPE_AN: ::libc::c_uint = 11;
pub const PANGO_BIDI_TYPE_CS: ::libc::c_uint = 12;
pub const PANGO_BIDI_TYPE_NSM: ::libc::c_uint = 13;
pub const PANGO_BIDI_TYPE_BN: ::libc::c_uint = 14;
pub const PANGO_BIDI_TYPE_B: ::libc::c_uint = 15;
pub const PANGO_BIDI_TYPE_S: ::libc::c_uint = 16;
pub const PANGO_BIDI_TYPE_WS: ::libc::c_uint = 17;
pub const PANGO_BIDI_TYPE_ON: ::libc::c_uint = 18;
pub type PangoBidiType = ::libc::c_uint;
pub const PANGO_DIRECTION_LTR: ::libc::c_uint = 0;
pub const PANGO_DIRECTION_RTL: ::libc::c_uint = 1;
pub const PANGO_DIRECTION_TTB_LTR: ::libc::c_uint = 2;
pub const PANGO_DIRECTION_TTB_RTL: ::libc::c_uint = 3;
pub const PANGO_DIRECTION_WEAK_LTR: ::libc::c_uint = 4;
pub const PANGO_DIRECTION_WEAK_RTL: ::libc::c_uint = 5;
pub const PANGO_DIRECTION_NEUTRAL: ::libc::c_uint = 6;
pub type PangoDirection = ::libc::c_uint;
pub enum Struct__PangoFontDescription { }
pub type PangoFontDescription = Struct__PangoFontDescription;
pub enum Struct__PangoFontMetrics { }
pub type PangoFontMetrics = Struct__PangoFontMetrics;
pub const PANGO_STYLE_NORMAL: ::libc::c_uint = 0;
pub const PANGO_STYLE_OBLIQUE: ::libc::c_uint = 1;
pub const PANGO_STYLE_ITALIC: ::libc::c_uint = 2;
pub type PangoStyle = ::libc::c_uint;
pub const PANGO_VARIANT_NORMAL: ::libc::c_uint = 0;
pub const PANGO_VARIANT_SMALL_CAPS: ::libc::c_uint = 1;
pub type PangoVariant = ::libc::c_uint;
pub const PANGO_WEIGHT_THIN: ::libc::c_uint = 100;
pub const PANGO_WEIGHT_ULTRALIGHT: ::libc::c_uint = 200;
pub const PANGO_WEIGHT_LIGHT: ::libc::c_uint = 300;
pub const PANGO_WEIGHT_SEMILIGHT: ::libc::c_uint = 350;
pub const PANGO_WEIGHT_BOOK: ::libc::c_uint = 380;
pub const PANGO_WEIGHT_NORMAL: ::libc::c_uint = 400;
pub const PANGO_WEIGHT_MEDIUM: ::libc::c_uint = 500;
pub const PANGO_WEIGHT_SEMIBOLD: ::libc::c_uint = 600;
pub const PANGO_WEIGHT_BOLD: ::libc::c_uint = 700;
pub const PANGO_WEIGHT_ULTRABOLD: ::libc::c_uint = 800;
pub const PANGO_WEIGHT_HEAVY: ::libc::c_uint = 900;
pub const PANGO_WEIGHT_ULTRAHEAVY: ::libc::c_uint = 1000;
pub type PangoWeight = ::libc::c_uint;
pub const PANGO_STRETCH_ULTRA_CONDENSED: ::libc::c_uint = 0;
pub const PANGO_STRETCH_EXTRA_CONDENSED: ::libc::c_uint = 1;
pub const PANGO_STRETCH_CONDENSED: ::libc::c_uint = 2;
pub const PANGO_STRETCH_SEMI_CONDENSED: ::libc::c_uint = 3;
pub const PANGO_STRETCH_NORMAL: ::libc::c_uint = 4;
pub const PANGO_STRETCH_SEMI_EXPANDED: ::libc::c_uint = 5;
pub const PANGO_STRETCH_EXPANDED: ::libc::c_uint = 6;
pub const PANGO_STRETCH_EXTRA_EXPANDED: ::libc::c_uint = 7;
pub const PANGO_STRETCH_ULTRA_EXPANDED: ::libc::c_uint = 8;
pub type PangoStretch = ::libc::c_uint;
pub const PANGO_FONT_MASK_FAMILY: ::libc::c_uint = 1;
pub const PANGO_FONT_MASK_STYLE: ::libc::c_uint = 2;
pub const PANGO_FONT_MASK_VARIANT: ::libc::c_uint = 4;
pub const PANGO_FONT_MASK_WEIGHT: ::libc::c_uint = 8;
pub const PANGO_FONT_MASK_STRETCH: ::libc::c_uint = 16;
pub const PANGO_FONT_MASK_SIZE: ::libc::c_uint = 32;
pub const PANGO_FONT_MASK_GRAVITY: ::libc::c_uint = 64;
pub type PangoFontMask = ::libc::c_uint;
pub enum Struct__PangoFontFamily { }
pub type PangoFontFamily = Struct__PangoFontFamily;
pub enum Struct__PangoFontFace { }
pub type PangoFontFace = Struct__PangoFontFace;
pub type PangoColor = Struct__PangoColor;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__PangoColor {
    pub red: guint16,
    pub green: guint16,
    pub blue: guint16,
}
impl ::std::clone::Clone for Struct__PangoColor {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__PangoColor {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type PangoAttribute = Struct__PangoAttribute;
pub type PangoAttrClass = Struct__PangoAttrClass;
pub type PangoAttrString = Struct__PangoAttrString;
pub type PangoAttrLanguage = Struct__PangoAttrLanguage;
pub type PangoAttrInt = Struct__PangoAttrInt;
pub type PangoAttrSize = Struct__PangoAttrSize;
pub type PangoAttrFloat = Struct__PangoAttrFloat;
pub type PangoAttrColor = Struct__PangoAttrColor;
pub type PangoAttrFontDesc = Struct__PangoAttrFontDesc;
pub type PangoAttrShape = Struct__PangoAttrShape;
pub enum Struct__PangoAttrList { }
pub type PangoAttrList = Struct__PangoAttrList;
pub enum Struct__PangoAttrIterator { }
pub type PangoAttrIterator = Struct__PangoAttrIterator;
pub const PANGO_ATTR_INVALID: ::libc::c_uint = 0;
pub const PANGO_ATTR_LANGUAGE: ::libc::c_uint = 1;
pub const PANGO_ATTR_FAMILY: ::libc::c_uint = 2;
pub const PANGO_ATTR_STYLE: ::libc::c_uint = 3;
pub const PANGO_ATTR_WEIGHT: ::libc::c_uint = 4;
pub const PANGO_ATTR_VARIANT: ::libc::c_uint = 5;
pub const PANGO_ATTR_STRETCH: ::libc::c_uint = 6;
pub const PANGO_ATTR_SIZE: ::libc::c_uint = 7;
pub const PANGO_ATTR_FONT_DESC: ::libc::c_uint = 8;
pub const PANGO_ATTR_FOREGROUND: ::libc::c_uint = 9;
pub const PANGO_ATTR_BACKGROUND: ::libc::c_uint = 10;
pub const PANGO_ATTR_UNDERLINE: ::libc::c_uint = 11;
pub const PANGO_ATTR_STRIKETHROUGH: ::libc::c_uint = 12;
pub const PANGO_ATTR_RISE: ::libc::c_uint = 13;
pub const PANGO_ATTR_SHAPE: ::libc::c_uint = 14;
pub const PANGO_ATTR_SCALE: ::libc::c_uint = 15;
pub const PANGO_ATTR_FALLBACK: ::libc::c_uint = 16;
pub const PANGO_ATTR_LETTER_SPACING: ::libc::c_uint = 17;
pub const PANGO_ATTR_UNDERLINE_COLOR: ::libc::c_uint = 18;
pub const PANGO_ATTR_STRIKETHROUGH_COLOR: ::libc::c_uint = 19;
pub const PANGO_ATTR_ABSOLUTE_SIZE: ::libc::c_uint = 20;
pub const PANGO_ATTR_GRAVITY: ::libc::c_uint = 21;
pub const PANGO_ATTR_GRAVITY_HINT: ::libc::c_uint = 22;
pub type PangoAttrType = ::libc::c_uint;
pub const PANGO_UNDERLINE_NONE: ::libc::c_uint = 0;
pub const PANGO_UNDERLINE_SINGLE: ::libc::c_uint = 1;
pub const PANGO_UNDERLINE_DOUBLE: ::libc::c_uint = 2;
pub const PANGO_UNDERLINE_LOW: ::libc::c_uint = 3;
pub const PANGO_UNDERLINE_ERROR: ::libc::c_uint = 4;
pub type PangoUnderline = ::libc::c_uint;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__PangoAttribute {
    pub klass: *const PangoAttrClass,
    pub start_index: guint,
    pub end_index: guint,
}
impl ::std::clone::Clone for Struct__PangoAttribute {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__PangoAttribute {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type PangoAttrFilterFunc =
    ::std::option::Option<extern "C" fn(attribute: *mut PangoAttribute,
                                        user_data: gpointer) -> gboolean>;
pub type PangoAttrDataCopyFunc =
    ::std::option::Option<extern "C" fn(user_data: gconstpointer)
                              -> gpointer>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__PangoAttrClass {
    pub _type: PangoAttrType,
    pub copy: ::std::option::Option<extern "C" fn(attr: *const PangoAttribute)
                                        -> *mut PangoAttribute>,
    pub destroy: ::std::option::Option<extern "C" fn(attr:
                                                         *mut PangoAttribute)
                                           -> ()>,
    pub equal: ::std::option::Option<extern "C" fn(attr1:
                                                       *const PangoAttribute,
                                                   attr2:
                                                       *const PangoAttribute)
                                         -> gboolean>,
}
impl ::std::clone::Clone for Struct__PangoAttrClass {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__PangoAttrClass {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__PangoAttrString {
    pub attr: PangoAttribute,
    pub value: *mut ::libc::c_char,
}
impl ::std::clone::Clone for Struct__PangoAttrString {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__PangoAttrString {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__PangoAttrLanguage {
    pub attr: PangoAttribute,
    pub value: *mut PangoLanguage,
}
impl ::std::clone::Clone for Struct__PangoAttrLanguage {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__PangoAttrLanguage {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__PangoAttrInt {
    pub attr: PangoAttribute,
    pub value: ::libc::c_int,
}
impl ::std::clone::Clone for Struct__PangoAttrInt {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__PangoAttrInt {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__PangoAttrFloat {
    pub attr: PangoAttribute,
    pub value: ::libc::c_double,
}
impl ::std::clone::Clone for Struct__PangoAttrFloat {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__PangoAttrFloat {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__PangoAttrColor {
    pub attr: PangoAttribute,
    pub color: PangoColor,
}
impl ::std::clone::Clone for Struct__PangoAttrColor {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__PangoAttrColor {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__PangoAttrSize {
    pub attr: PangoAttribute,
    pub size: ::libc::c_int,
    pub _bindgen_bitfield_1_: guint,
}
impl ::std::clone::Clone for Struct__PangoAttrSize {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__PangoAttrSize {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__PangoAttrShape {
    pub attr: PangoAttribute,
    pub ink_rect: PangoRectangle,
    pub logical_rect: PangoRectangle,
    pub data: gpointer,
    pub copy_func: PangoAttrDataCopyFunc,
    pub destroy_func: GDestroyNotify,
}
impl ::std::clone::Clone for Struct__PangoAttrShape {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__PangoAttrShape {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__PangoAttrFontDesc {
    pub attr: PangoAttribute,
    pub desc: *mut PangoFontDescription,
}
impl ::std::clone::Clone for Struct__PangoAttrFontDesc {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__PangoAttrFontDesc {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type PangoAnalysis = Struct__PangoAnalysis;
pub type PangoItem = Struct__PangoItem;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__PangoAnalysis {
    pub shape_engine: *mut PangoEngineShape,
    pub lang_engine: *mut PangoEngineLang,
    pub font: *mut PangoFont,
    pub level: guint8,
    pub gravity: guint8,
    pub flags: guint8,
    pub script: guint8,
    pub language: *mut PangoLanguage,
    pub extra_attrs: *mut GSList,
}
impl ::std::clone::Clone for Struct__PangoAnalysis {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__PangoAnalysis {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__PangoItem {
    pub offset: gint,
    pub length: gint,
    pub num_chars: gint,
    pub analysis: PangoAnalysis,
}
impl ::std::clone::Clone for Struct__PangoItem {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__PangoItem {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__PangoLogAttr {
    pub _bindgen_bitfield_1_: guint,
    pub _bindgen_bitfield_2_: guint,
    pub _bindgen_bitfield_3_: guint,
    pub _bindgen_bitfield_4_: guint,
    pub _bindgen_bitfield_5_: guint,
    pub _bindgen_bitfield_6_: guint,
    pub _bindgen_bitfield_7_: guint,
    pub _bindgen_bitfield_8_: guint,
    pub _bindgen_bitfield_9_: guint,
    pub _bindgen_bitfield_10_: guint,
    pub _bindgen_bitfield_11_: guint,
    pub _bindgen_bitfield_12_: guint,
    pub _bindgen_bitfield_13_: guint,
}
impl ::std::clone::Clone for Struct__PangoLogAttr {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__PangoLogAttr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum Struct__PangoFontset { }
pub type PangoFontset = Struct__PangoFontset;
pub type PangoFontsetForeachFunc =
    ::std::option::Option<extern "C" fn(fontset: *mut PangoFontset,
                                        font: *mut PangoFont,
                                        user_data: gpointer) -> gboolean>;
pub enum Struct__PangoContext { }
pub type PangoContext = Struct__PangoContext;
pub enum Struct__PangoContextClass { }
pub type PangoContextClass = Struct__PangoContextClass;
pub type PangoGlyphGeometry = Struct__PangoGlyphGeometry;
pub type PangoGlyphVisAttr = Struct__PangoGlyphVisAttr;
pub type PangoGlyphInfo = Struct__PangoGlyphInfo;
pub type PangoGlyphString = Struct__PangoGlyphString;
pub type PangoGlyphUnit = gint32;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__PangoGlyphGeometry {
    pub width: PangoGlyphUnit,
    pub x_offset: PangoGlyphUnit,
    pub y_offset: PangoGlyphUnit,
}
impl ::std::clone::Clone for Struct__PangoGlyphGeometry {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__PangoGlyphGeometry {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__PangoGlyphVisAttr {
    pub _bindgen_bitfield_1_: guint,
}
impl ::std::clone::Clone for Struct__PangoGlyphVisAttr {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__PangoGlyphVisAttr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__PangoGlyphInfo {
    pub glyph: PangoGlyph,
    pub geometry: PangoGlyphGeometry,
    pub attr: PangoGlyphVisAttr,
}
impl ::std::clone::Clone for Struct__PangoGlyphInfo {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__PangoGlyphInfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__PangoGlyphString {
    pub num_glyphs: gint,
    pub glyphs: *mut PangoGlyphInfo,
    pub log_clusters: *mut gint,
    pub space: gint,
}
impl ::std::clone::Clone for Struct__PangoGlyphString {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__PangoGlyphString {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type PangoGlyphItem = Struct__PangoGlyphItem;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__PangoGlyphItem {
    pub item: *mut PangoItem,
    pub glyphs: *mut PangoGlyphString,
}
impl ::std::clone::Clone for Struct__PangoGlyphItem {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__PangoGlyphItem {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type PangoGlyphItemIter = Struct__PangoGlyphItemIter;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__PangoGlyphItemIter {
    pub glyph_item: *mut PangoGlyphItem,
    pub text: *const gchar,
    pub start_glyph: ::libc::c_int,
    pub start_index: ::libc::c_int,
    pub start_char: ::libc::c_int,
    pub end_glyph: ::libc::c_int,
    pub end_index: ::libc::c_int,
    pub end_char: ::libc::c_int,
}
impl ::std::clone::Clone for Struct__PangoGlyphItemIter {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__PangoGlyphItemIter {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum Struct__PangoTabArray { }
pub type PangoTabArray = Struct__PangoTabArray;
pub const PANGO_TAB_LEFT: ::libc::c_uint = 0;
pub type PangoTabAlign = ::libc::c_uint;
pub enum Struct__PangoLayout { }
pub type PangoLayout = Struct__PangoLayout;
pub enum Struct__PangoLayoutClass { }
pub type PangoLayoutClass = Struct__PangoLayoutClass;
pub type PangoLayoutLine = Struct__PangoLayoutLine;
pub type PangoLayoutRun = PangoGlyphItem;
pub const PANGO_ALIGN_LEFT: ::libc::c_uint = 0;
pub const PANGO_ALIGN_CENTER: ::libc::c_uint = 1;
pub const PANGO_ALIGN_RIGHT: ::libc::c_uint = 2;
pub type PangoAlignment = ::libc::c_uint;
pub const PANGO_WRAP_WORD: ::libc::c_uint = 0;
pub const PANGO_WRAP_CHAR: ::libc::c_uint = 1;
pub const PANGO_WRAP_WORD_CHAR: ::libc::c_uint = 2;
pub type PangoWrapMode = ::libc::c_uint;
pub const PANGO_ELLIPSIZE_NONE: ::libc::c_uint = 0;
pub const PANGO_ELLIPSIZE_START: ::libc::c_uint = 1;
pub const PANGO_ELLIPSIZE_MIDDLE: ::libc::c_uint = 2;
pub const PANGO_ELLIPSIZE_END: ::libc::c_uint = 3;
pub type PangoEllipsizeMode = ::libc::c_uint;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__PangoLayoutLine {
    pub layout: *mut PangoLayout,
    pub start_index: gint,
    pub length: gint,
    pub runs: *mut GSList,
    pub _bindgen_bitfield_1_: guint,
    pub _bindgen_bitfield_2_: guint,
}
impl ::std::clone::Clone for Struct__PangoLayoutLine {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__PangoLayoutLine {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum Struct__PangoLayoutIter { }
pub type PangoLayoutIter = Struct__PangoLayoutIter;
pub type PangoRenderer = Struct__PangoRenderer;
pub type PangoRendererClass = Struct__PangoRendererClass;
pub enum Struct__PangoRendererPrivate { }
pub type PangoRendererPrivate = Struct__PangoRendererPrivate;
pub const PANGO_RENDER_PART_FOREGROUND: ::libc::c_uint = 0;
pub const PANGO_RENDER_PART_BACKGROUND: ::libc::c_uint = 1;
pub const PANGO_RENDER_PART_UNDERLINE: ::libc::c_uint = 2;
pub const PANGO_RENDER_PART_STRIKETHROUGH: ::libc::c_uint = 3;
pub type PangoRenderPart = ::libc::c_uint;
pub enum Struct__PangoRenderer { }
pub enum Struct__PangoRendererClass { }
extern "C" {
    pub fn pango_coverage_new() -> *mut PangoCoverage;
    pub fn pango_coverage_ref(coverage: *mut PangoCoverage)
     -> *mut PangoCoverage;
    pub fn pango_coverage_unref(coverage: *mut PangoCoverage) -> ();
    pub fn pango_coverage_copy(coverage: *mut PangoCoverage)
     -> *mut PangoCoverage;
    pub fn pango_coverage_get(coverage: *mut PangoCoverage,
                              index_: ::libc::c_int) -> PangoCoverageLevel;
    pub fn pango_coverage_set(coverage: *mut PangoCoverage,
                              index_: ::libc::c_int,
                              level: PangoCoverageLevel) -> ();
    pub fn pango_coverage_max(coverage: *mut PangoCoverage,
                              other: *mut PangoCoverage) -> ();
    pub fn pango_coverage_to_bytes(coverage: *mut PangoCoverage,
                                   bytes: *mut *mut guchar,
                                   n_bytes: *mut ::libc::c_int) -> ();
    pub fn pango_coverage_from_bytes(bytes: *mut guchar,
                                     n_bytes: ::libc::c_int)
     -> *mut PangoCoverage;
    pub fn pango_units_from_double(d: ::libc::c_double) -> ::libc::c_int;
    pub fn pango_units_to_double(i: ::libc::c_int) -> ::libc::c_double;
    pub fn pango_extents_to_pixels(inclusive: *mut PangoRectangle,
                                   nearest: *mut PangoRectangle) -> ();
    pub fn pango_matrix_get_type() -> GType;
    pub fn pango_matrix_copy(matrix: *const PangoMatrix) -> *mut PangoMatrix;
    pub fn pango_matrix_free(matrix: *mut PangoMatrix) -> ();
    pub fn pango_matrix_translate(matrix: *mut PangoMatrix,
                                  tx: ::libc::c_double, ty: ::libc::c_double)
     -> ();
    pub fn pango_matrix_scale(matrix: *mut PangoMatrix,
                              scale_x: ::libc::c_double,
                              scale_y: ::libc::c_double) -> ();
    pub fn pango_matrix_rotate(matrix: *mut PangoMatrix,
                               degrees: ::libc::c_double) -> ();
    pub fn pango_matrix_concat(matrix: *mut PangoMatrix,
                               new_matrix: *const PangoMatrix) -> ();
    pub fn pango_matrix_transform_point(matrix: *const PangoMatrix,
                                        x: *mut ::libc::c_double,
                                        y: *mut ::libc::c_double) -> ();
    pub fn pango_matrix_transform_distance(matrix: *const PangoMatrix,
                                           dx: *mut ::libc::c_double,
                                           dy: *mut ::libc::c_double) -> ();
    pub fn pango_matrix_transform_rectangle(matrix: *const PangoMatrix,
                                            rect: *mut PangoRectangle) -> ();
    pub fn pango_matrix_transform_pixel_rectangle(matrix: *const PangoMatrix,
                                                  rect: *mut PangoRectangle)
     -> ();
    pub fn pango_matrix_get_font_scale_factor(matrix: *const PangoMatrix)
     -> ::libc::c_double;
    pub fn pango_script_for_unichar(ch: gunichar) -> PangoScript;
    pub fn pango_script_iter_new(text: *const ::libc::c_char,
                                 length: ::libc::c_int)
     -> *mut PangoScriptIter;
    pub fn pango_script_iter_get_range(iter: *mut PangoScriptIter,
                                       start: *mut *const ::libc::c_char,
                                       end: *mut *const ::libc::c_char,
                                       script: *mut PangoScript) -> ();
    pub fn pango_script_iter_next(iter: *mut PangoScriptIter) -> gboolean;
    pub fn pango_script_iter_free(iter: *mut PangoScriptIter) -> ();
    pub fn pango_language_get_type() -> GType;
    pub fn pango_language_from_string(language: *const ::libc::c_char)
     -> *mut PangoLanguage;
    pub fn pango_language_to_string(language: *mut PangoLanguage)
     -> *const ::libc::c_char;
    pub fn pango_language_get_sample_string(language: *mut PangoLanguage)
     -> *const ::libc::c_char;
    pub fn pango_language_get_default() -> *mut PangoLanguage;
    pub fn pango_language_matches(language: *mut PangoLanguage,
                                  range_list: *const ::libc::c_char)
     -> gboolean;
    pub fn pango_language_includes_script(language: *mut PangoLanguage,
                                          script: PangoScript) -> gboolean;
    pub fn pango_language_get_scripts(language: *mut PangoLanguage,
                                      num_scripts: *mut ::libc::c_int)
     -> *const PangoScript;
    pub fn pango_script_get_sample_language(script: PangoScript)
     -> *mut PangoLanguage;
    pub fn pango_gravity_to_rotation(gravity: PangoGravity)
     -> ::libc::c_double;
    pub fn pango_gravity_get_for_matrix(matrix: *const PangoMatrix)
     -> PangoGravity;
    pub fn pango_gravity_get_for_script(script: PangoScript,
                                        base_gravity: PangoGravity,
                                        hint: PangoGravityHint)
     -> PangoGravity;
    pub fn pango_gravity_get_for_script_and_width(script: PangoScript,
                                                  wide: gboolean,
                                                  base_gravity: PangoGravity,
                                                  hint: PangoGravityHint)
     -> PangoGravity;
    pub fn pango_bidi_type_for_unichar(ch: gunichar) -> PangoBidiType;
    pub fn pango_unichar_direction(ch: gunichar) -> PangoDirection;
    pub fn pango_find_base_dir(text: *const gchar, length: gint)
     -> PangoDirection;
    pub fn pango_get_mirror_char(ch: gunichar, mirrored_ch: *mut gunichar)
     -> gboolean;
    pub fn pango_font_description_get_type() -> GType;
    pub fn pango_font_description_new() -> *mut PangoFontDescription;
    pub fn pango_font_description_copy(desc: *const PangoFontDescription)
     -> *mut PangoFontDescription;
    pub fn pango_font_description_copy_static(desc:
                                                  *const PangoFontDescription)
     -> *mut PangoFontDescription;
    pub fn pango_font_description_hash(desc: *const PangoFontDescription)
     -> guint;
    pub fn pango_font_description_equal(desc1: *const PangoFontDescription,
                                        desc2: *const PangoFontDescription)
     -> gboolean;
    pub fn pango_font_description_free(desc: *mut PangoFontDescription) -> ();
    pub fn pango_font_descriptions_free(descs: *mut *mut PangoFontDescription,
                                        n_descs: ::libc::c_int) -> ();
    pub fn pango_font_description_set_family(desc: *mut PangoFontDescription,
                                             family: *const ::libc::c_char)
     -> ();
    pub fn pango_font_description_set_family_static(desc:
                                                        *mut PangoFontDescription,
                                                    family:
                                                        *const ::libc::c_char)
     -> ();
    pub fn pango_font_description_get_family(desc:
                                                 *const PangoFontDescription)
     -> *const ::libc::c_char;
    pub fn pango_font_description_set_style(desc: *mut PangoFontDescription,
                                            style: PangoStyle) -> ();
    pub fn pango_font_description_get_style(desc: *const PangoFontDescription)
     -> PangoStyle;
    pub fn pango_font_description_set_variant(desc: *mut PangoFontDescription,
                                              variant: PangoVariant) -> ();
    pub fn pango_font_description_get_variant(desc:
                                                  *const PangoFontDescription)
     -> PangoVariant;
    pub fn pango_font_description_set_weight(desc: *mut PangoFontDescription,
                                             weight: PangoWeight) -> ();
    pub fn pango_font_description_get_weight(desc:
                                                 *const PangoFontDescription)
     -> PangoWeight;
    pub fn pango_font_description_set_stretch(desc: *mut PangoFontDescription,
                                              stretch: PangoStretch) -> ();
    pub fn pango_font_description_get_stretch(desc:
                                                  *const PangoFontDescription)
     -> PangoStretch;
    pub fn pango_font_description_set_size(desc: *mut PangoFontDescription,
                                           size: gint) -> ();
    pub fn pango_font_description_get_size(desc: *const PangoFontDescription)
     -> gint;
    pub fn pango_font_description_set_absolute_size(desc:
                                                        *mut PangoFontDescription,
                                                    size: ::libc::c_double)
     -> ();
    pub fn pango_font_description_get_size_is_absolute(desc:
                                                           *const PangoFontDescription)
     -> gboolean;
    pub fn pango_font_description_set_gravity(desc: *mut PangoFontDescription,
                                              gravity: PangoGravity) -> ();
    pub fn pango_font_description_get_gravity(desc:
                                                  *const PangoFontDescription)
     -> PangoGravity;
    pub fn pango_font_description_get_set_fields(desc:
                                                     *const PangoFontDescription)
     -> PangoFontMask;
    pub fn pango_font_description_unset_fields(desc:
                                                   *mut PangoFontDescription,
                                               to_unset: PangoFontMask) -> ();
    pub fn pango_font_description_merge(desc: *mut PangoFontDescription,
                                        desc_to_merge:
                                            *const PangoFontDescription,
                                        replace_existing: gboolean) -> ();
    pub fn pango_font_description_merge_static(desc:
                                                   *mut PangoFontDescription,
                                               desc_to_merge:
                                                   *const PangoFontDescription,
                                               replace_existing: gboolean)
     -> ();
    pub fn pango_font_description_better_match(desc:
                                                   *const PangoFontDescription,
                                               old_match:
                                                   *const PangoFontDescription,
                                               new_match:
                                                   *const PangoFontDescription)
     -> gboolean;
    pub fn pango_font_description_from_string(str: *const ::libc::c_char)
     -> *mut PangoFontDescription;
    pub fn pango_font_description_to_string(desc: *const PangoFontDescription)
     -> *mut ::libc::c_char;
    pub fn pango_font_description_to_filename(desc:
                                                  *const PangoFontDescription)
     -> *mut ::libc::c_char;
    pub fn pango_font_metrics_get_type() -> GType;
    pub fn pango_font_metrics_ref(metrics: *mut PangoFontMetrics)
     -> *mut PangoFontMetrics;
    pub fn pango_font_metrics_unref(metrics: *mut PangoFontMetrics) -> ();
    pub fn pango_font_metrics_get_ascent(metrics: *mut PangoFontMetrics)
     -> ::libc::c_int;
    pub fn pango_font_metrics_get_descent(metrics: *mut PangoFontMetrics)
     -> ::libc::c_int;
    pub fn pango_font_metrics_get_approximate_char_width(metrics:
                                                             *mut PangoFontMetrics)
     -> ::libc::c_int;
    pub fn pango_font_metrics_get_approximate_digit_width(metrics:
                                                              *mut PangoFontMetrics)
     -> ::libc::c_int;
    pub fn pango_font_metrics_get_underline_position(metrics:
                                                         *mut PangoFontMetrics)
     -> ::libc::c_int;
    pub fn pango_font_metrics_get_underline_thickness(metrics:
                                                          *mut PangoFontMetrics)
     -> ::libc::c_int;
    pub fn pango_font_metrics_get_strikethrough_position(metrics:
                                                             *mut PangoFontMetrics)
     -> ::libc::c_int;
    pub fn pango_font_metrics_get_strikethrough_thickness(metrics:
                                                              *mut PangoFontMetrics)
     -> ::libc::c_int;
    pub fn pango_font_family_get_type() -> GType;
    pub fn pango_font_family_list_faces(family: *mut PangoFontFamily,
                                        faces: *mut *mut *mut PangoFontFace,
                                        n_faces: *mut ::libc::c_int) -> ();
    pub fn pango_font_family_get_name(family: *mut PangoFontFamily)
     -> *const ::libc::c_char;
    pub fn pango_font_family_is_monospace(family: *mut PangoFontFamily)
     -> gboolean;
    pub fn pango_font_face_get_type() -> GType;
    pub fn pango_font_face_describe(face: *mut PangoFontFace)
     -> *mut PangoFontDescription;
    pub fn pango_font_face_get_face_name(face: *mut PangoFontFace)
     -> *const ::libc::c_char;
    pub fn pango_font_face_list_sizes(face: *mut PangoFontFace,
                                      sizes: *mut *mut ::libc::c_int,
                                      n_sizes: *mut ::libc::c_int) -> ();
    pub fn pango_font_face_is_synthesized(face: *mut PangoFontFace)
     -> gboolean;
    pub fn pango_font_get_type() -> GType;
    pub fn pango_font_describe(font: *mut PangoFont)
     -> *mut PangoFontDescription;
    pub fn pango_font_describe_with_absolute_size(font: *mut PangoFont)
     -> *mut PangoFontDescription;
    pub fn pango_font_get_coverage(font: *mut PangoFont,
                                   language: *mut PangoLanguage)
     -> *mut PangoCoverage;
    pub fn pango_font_find_shaper(font: *mut PangoFont,
                                  language: *mut PangoLanguage, ch: guint32)
     -> *mut PangoEngineShape;
    pub fn pango_font_get_metrics(font: *mut PangoFont,
                                  language: *mut PangoLanguage)
     -> *mut PangoFontMetrics;
    pub fn pango_font_get_glyph_extents(font: *mut PangoFont,
                                        glyph: PangoGlyph,
                                        ink_rect: *mut PangoRectangle,
                                        logical_rect: *mut PangoRectangle)
     -> ();
    pub fn pango_font_get_font_map(font: *mut PangoFont) -> *mut PangoFontMap;
    pub fn pango_color_get_type() -> GType;
    pub fn pango_color_copy(src: *const PangoColor) -> *mut PangoColor;
    pub fn pango_color_free(color: *mut PangoColor) -> ();
    pub fn pango_color_parse(color: *mut PangoColor,
                             spec: *const ::libc::c_char) -> gboolean;
    pub fn pango_color_to_string(color: *const PangoColor) -> *mut gchar;
    pub fn pango_attr_type_register(name: *const gchar) -> PangoAttrType;
    pub fn pango_attr_type_get_name(_type: PangoAttrType)
     -> *const ::libc::c_char;
    pub fn pango_attribute_init(attr: *mut PangoAttribute,
                                klass: *const PangoAttrClass) -> ();
    pub fn pango_attribute_copy(attr: *const PangoAttribute)
     -> *mut PangoAttribute;
    pub fn pango_attribute_destroy(attr: *mut PangoAttribute) -> ();
    pub fn pango_attribute_equal(attr1: *const PangoAttribute,
                                 attr2: *const PangoAttribute) -> gboolean;
    pub fn pango_attr_language_new(language: *mut PangoLanguage)
     -> *mut PangoAttribute;
    pub fn pango_attr_family_new(family: *const ::libc::c_char)
     -> *mut PangoAttribute;
    pub fn pango_attr_foreground_new(red: guint16, green: guint16,
                                     blue: guint16) -> *mut PangoAttribute;
    pub fn pango_attr_background_new(red: guint16, green: guint16,
                                     blue: guint16) -> *mut PangoAttribute;
    pub fn pango_attr_size_new(size: ::libc::c_int) -> *mut PangoAttribute;
    pub fn pango_attr_size_new_absolute(size: ::libc::c_int)
     -> *mut PangoAttribute;
    pub fn pango_attr_style_new(style: PangoStyle) -> *mut PangoAttribute;
    pub fn pango_attr_weight_new(weight: PangoWeight) -> *mut PangoAttribute;
    pub fn pango_attr_variant_new(variant: PangoVariant)
     -> *mut PangoAttribute;
    pub fn pango_attr_stretch_new(stretch: PangoStretch)
     -> *mut PangoAttribute;
    pub fn pango_attr_font_desc_new(desc: *const PangoFontDescription)
     -> *mut PangoAttribute;
    pub fn pango_attr_underline_new(underline: PangoUnderline)
     -> *mut PangoAttribute;
    pub fn pango_attr_underline_color_new(red: guint16, green: guint16,
                                          blue: guint16)
     -> *mut PangoAttribute;
    pub fn pango_attr_strikethrough_new(strikethrough: gboolean)
     -> *mut PangoAttribute;
    pub fn pango_attr_strikethrough_color_new(red: guint16, green: guint16,
                                              blue: guint16)
     -> *mut PangoAttribute;
    pub fn pango_attr_rise_new(rise: ::libc::c_int) -> *mut PangoAttribute;
    pub fn pango_attr_scale_new(scale_factor: ::libc::c_double)
     -> *mut PangoAttribute;
    pub fn pango_attr_fallback_new(enable_fallback: gboolean)
     -> *mut PangoAttribute;
    pub fn pango_attr_letter_spacing_new(letter_spacing: ::libc::c_int)
     -> *mut PangoAttribute;
    pub fn pango_attr_shape_new(ink_rect: *const PangoRectangle,
                                logical_rect: *const PangoRectangle)
     -> *mut PangoAttribute;
    pub fn pango_attr_shape_new_with_data(ink_rect: *const PangoRectangle,
                                          logical_rect: *const PangoRectangle,
                                          data: gpointer,
                                          copy_func: PangoAttrDataCopyFunc,
                                          destroy_func: GDestroyNotify)
     -> *mut PangoAttribute;
    pub fn pango_attr_gravity_new(gravity: PangoGravity)
     -> *mut PangoAttribute;
    pub fn pango_attr_gravity_hint_new(hint: PangoGravityHint)
     -> *mut PangoAttribute;
    pub fn pango_attr_list_get_type() -> GType;
    pub fn pango_attr_list_new() -> *mut PangoAttrList;
    pub fn pango_attr_list_ref(list: *mut PangoAttrList)
     -> *mut PangoAttrList;
    pub fn pango_attr_list_unref(list: *mut PangoAttrList) -> ();
    pub fn pango_attr_list_copy(list: *mut PangoAttrList)
     -> *mut PangoAttrList;
    pub fn pango_attr_list_insert(list: *mut PangoAttrList,
                                  attr: *mut PangoAttribute) -> ();
    pub fn pango_attr_list_insert_before(list: *mut PangoAttrList,
                                         attr: *mut PangoAttribute) -> ();
    pub fn pango_attr_list_change(list: *mut PangoAttrList,
                                  attr: *mut PangoAttribute) -> ();
    pub fn pango_attr_list_splice(list: *mut PangoAttrList,
                                  other: *mut PangoAttrList, pos: gint,
                                  len: gint) -> ();
    pub fn pango_attr_list_filter(list: *mut PangoAttrList,
                                  func: PangoAttrFilterFunc, data: gpointer)
     -> *mut PangoAttrList;
    pub fn pango_attr_list_get_iterator(list: *mut PangoAttrList)
     -> *mut PangoAttrIterator;
    pub fn pango_attr_iterator_range(iterator: *mut PangoAttrIterator,
                                     start: *mut gint, end: *mut gint) -> ();
    pub fn pango_attr_iterator_next(iterator: *mut PangoAttrIterator)
     -> gboolean;
    pub fn pango_attr_iterator_copy(iterator: *mut PangoAttrIterator)
     -> *mut PangoAttrIterator;
    pub fn pango_attr_iterator_destroy(iterator: *mut PangoAttrIterator)
     -> ();
    pub fn pango_attr_iterator_get(iterator: *mut PangoAttrIterator,
                                   _type: PangoAttrType)
     -> *mut PangoAttribute;
    pub fn pango_attr_iterator_get_font(iterator: *mut PangoAttrIterator,
                                        desc: *mut PangoFontDescription,
                                        language: *mut *mut PangoLanguage,
                                        extra_attrs: *mut *mut GSList) -> ();
    pub fn pango_attr_iterator_get_attrs(iterator: *mut PangoAttrIterator)
     -> *mut GSList;
    pub fn pango_parse_markup(markup_text: *const ::libc::c_char,
                              length: ::libc::c_int, accel_marker: gunichar,
                              attr_list: *mut *mut PangoAttrList,
                              text: *mut *mut ::libc::c_char,
                              accel_char: *mut gunichar,
                              error: *mut *mut GError) -> gboolean;
    pub fn pango_markup_parser_new(accel_marker: gunichar)
     -> *mut GMarkupParseContext;
    pub fn pango_markup_parser_finish(context: *mut GMarkupParseContext,
                                      attr_list: *mut *mut PangoAttrList,
                                      text: *mut *mut ::libc::c_char,
                                      accel_char: *mut gunichar,
                                      error: *mut *mut GError) -> gboolean;
    pub fn pango_item_get_type() -> GType;
    pub fn pango_item_new() -> *mut PangoItem;
    pub fn pango_item_copy(item: *mut PangoItem) -> *mut PangoItem;
    pub fn pango_item_free(item: *mut PangoItem) -> ();
    pub fn pango_item_split(orig: *mut PangoItem, split_index: ::libc::c_int,
                            split_offset: ::libc::c_int) -> *mut PangoItem;
    pub fn pango_break(text: *const gchar, length: ::libc::c_int,
                       analysis: *mut PangoAnalysis, attrs: *mut PangoLogAttr,
                       attrs_len: ::libc::c_int) -> ();
    pub fn pango_find_paragraph_boundary(text: *const gchar, length: gint,
                                         paragraph_delimiter_index: *mut gint,
                                         next_paragraph_start: *mut gint)
     -> ();
    pub fn pango_get_log_attrs(text: *const ::libc::c_char,
                               length: ::libc::c_int, level: ::libc::c_int,
                               language: *mut PangoLanguage,
                               log_attrs: *mut PangoLogAttr,
                               attrs_len: ::libc::c_int) -> ();
    pub fn pango_fontset_get_type() -> GType;
    pub fn pango_fontset_get_font(fontset: *mut PangoFontset, wc: guint)
     -> *mut PangoFont;
    pub fn pango_fontset_get_metrics(fontset: *mut PangoFontset)
     -> *mut PangoFontMetrics;
    pub fn pango_fontset_foreach(fontset: *mut PangoFontset,
                                 func: PangoFontsetForeachFunc,
                                 data: gpointer) -> ();
    pub fn pango_font_map_get_type() -> GType;
    pub fn pango_font_map_create_context(fontmap: *mut PangoFontMap)
     -> *mut PangoContext;
    pub fn pango_font_map_load_font(fontmap: *mut PangoFontMap,
                                    context: *mut PangoContext,
                                    desc: *const PangoFontDescription)
     -> *mut PangoFont;
    pub fn pango_font_map_load_fontset(fontmap: *mut PangoFontMap,
                                       context: *mut PangoContext,
                                       desc: *const PangoFontDescription,
                                       language: *mut PangoLanguage)
     -> *mut PangoFontset;
    pub fn pango_font_map_list_families(fontmap: *mut PangoFontMap,
                                        families:
                                            *mut *mut *mut PangoFontFamily,
                                        n_families: *mut ::libc::c_int) -> ();
    pub fn pango_font_map_get_serial(fontmap: *mut PangoFontMap) -> guint;
    pub fn pango_font_map_changed(fontmap: *mut PangoFontMap) -> ();
    pub fn pango_context_get_type() -> GType;
    pub fn pango_context_new() -> *mut PangoContext;
    pub fn pango_context_changed(context: *mut PangoContext) -> ();
    pub fn pango_context_set_font_map(context: *mut PangoContext,
                                      font_map: *mut PangoFontMap) -> ();
    pub fn pango_context_get_font_map(context: *mut PangoContext)
     -> *mut PangoFontMap;
    pub fn pango_context_get_serial(context: *mut PangoContext) -> guint;
    pub fn pango_context_list_families(context: *mut PangoContext,
                                       families:
                                           *mut *mut *mut PangoFontFamily,
                                       n_families: *mut ::libc::c_int) -> ();
    pub fn pango_context_load_font(context: *mut PangoContext,
                                   desc: *const PangoFontDescription)
     -> *mut PangoFont;
    pub fn pango_context_load_fontset(context: *mut PangoContext,
                                      desc: *const PangoFontDescription,
                                      language: *mut PangoLanguage)
     -> *mut PangoFontset;
    pub fn pango_context_get_metrics(context: *mut PangoContext,
                                     desc: *const PangoFontDescription,
                                     language: *mut PangoLanguage)
     -> *mut PangoFontMetrics;
    pub fn pango_context_set_font_description(context: *mut PangoContext,
                                              desc:
                                                  *const PangoFontDescription)
     -> ();
    pub fn pango_context_get_font_description(context: *mut PangoContext)
     -> *mut PangoFontDescription;
    pub fn pango_context_get_language(context: *mut PangoContext)
     -> *mut PangoLanguage;
    pub fn pango_context_set_language(context: *mut PangoContext,
                                      language: *mut PangoLanguage) -> ();
    pub fn pango_context_set_base_dir(context: *mut PangoContext,
                                      direction: PangoDirection) -> ();
    pub fn pango_context_get_base_dir(context: *mut PangoContext)
     -> PangoDirection;
    pub fn pango_context_set_base_gravity(context: *mut PangoContext,
                                          gravity: PangoGravity) -> ();
    pub fn pango_context_get_base_gravity(context: *mut PangoContext)
     -> PangoGravity;
    pub fn pango_context_get_gravity(context: *mut PangoContext)
     -> PangoGravity;
    pub fn pango_context_set_gravity_hint(context: *mut PangoContext,
                                          hint: PangoGravityHint) -> ();
    pub fn pango_context_get_gravity_hint(context: *mut PangoContext)
     -> PangoGravityHint;
    pub fn pango_context_set_matrix(context: *mut PangoContext,
                                    matrix: *const PangoMatrix) -> ();
    pub fn pango_context_get_matrix(context: *mut PangoContext)
     -> *const PangoMatrix;
    pub fn pango_itemize(context: *mut PangoContext,
                         text: *const ::libc::c_char,
                         start_index: ::libc::c_int, length: ::libc::c_int,
                         attrs: *mut PangoAttrList,
                         cached_iter: *mut PangoAttrIterator) -> *mut GList;
    pub fn pango_itemize_with_base_dir(context: *mut PangoContext,
                                       base_dir: PangoDirection,
                                       text: *const ::libc::c_char,
                                       start_index: ::libc::c_int,
                                       length: ::libc::c_int,
                                       attrs: *mut PangoAttrList,
                                       cached_iter: *mut PangoAttrIterator)
     -> *mut GList;
    pub fn pango_glyph_string_new() -> *mut PangoGlyphString;
    pub fn pango_glyph_string_set_size(string: *mut PangoGlyphString,
                                       new_len: gint) -> ();
    pub fn pango_glyph_string_get_type() -> GType;
    pub fn pango_glyph_string_copy(string: *mut PangoGlyphString)
     -> *mut PangoGlyphString;
    pub fn pango_glyph_string_free(string: *mut PangoGlyphString) -> ();
    pub fn pango_glyph_string_extents(glyphs: *mut PangoGlyphString,
                                      font: *mut PangoFont,
                                      ink_rect: *mut PangoRectangle,
                                      logical_rect: *mut PangoRectangle)
     -> ();
    pub fn pango_glyph_string_get_width(glyphs: *mut PangoGlyphString)
     -> ::libc::c_int;
    pub fn pango_glyph_string_extents_range(glyphs: *mut PangoGlyphString,
                                            start: ::libc::c_int,
                                            end: ::libc::c_int,
                                            font: *mut PangoFont,
                                            ink_rect: *mut PangoRectangle,
                                            logical_rect: *mut PangoRectangle)
     -> ();
    pub fn pango_glyph_string_get_logical_widths(glyphs:
                                                     *mut PangoGlyphString,
                                                 text: *const ::libc::c_char,
                                                 length: ::libc::c_int,
                                                 embedding_level:
                                                     ::libc::c_int,
                                                 logical_widths:
                                                     *mut ::libc::c_int)
     -> ();
    pub fn pango_glyph_string_index_to_x(glyphs: *mut PangoGlyphString,
                                         text: *mut ::libc::c_char,
                                         length: ::libc::c_int,
                                         analysis: *mut PangoAnalysis,
                                         index_: ::libc::c_int,
                                         trailing: gboolean,
                                         x_pos: *mut ::libc::c_int) -> ();
    pub fn pango_glyph_string_x_to_index(glyphs: *mut PangoGlyphString,
                                         text: *mut ::libc::c_char,
                                         length: ::libc::c_int,
                                         analysis: *mut PangoAnalysis,
                                         x_pos: ::libc::c_int,
                                         index_: *mut ::libc::c_int,
                                         trailing: *mut ::libc::c_int) -> ();
    pub fn pango_shape(text: *const gchar, length: gint,
                       analysis: *const PangoAnalysis,
                       glyphs: *mut PangoGlyphString) -> ();
    pub fn pango_shape_full(item_text: *const gchar, item_length: gint,
                            paragraph_text: *const gchar,
                            paragraph_length: gint,
                            analysis: *const PangoAnalysis,
                            glyphs: *mut PangoGlyphString) -> ();
    pub fn pango_reorder_items(logical_items: *mut GList) -> *mut GList;
    pub fn pango_attr_type_get_type() -> GType;
    pub fn pango_underline_get_type() -> GType;
    pub fn pango_bidi_type_get_type() -> GType;
    pub fn pango_direction_get_type() -> GType;
    pub fn pango_coverage_level_get_type() -> GType;
    pub fn pango_style_get_type() -> GType;
    pub fn pango_variant_get_type() -> GType;
    pub fn pango_weight_get_type() -> GType;
    pub fn pango_stretch_get_type() -> GType;
    pub fn pango_font_mask_get_type() -> GType;
    pub fn pango_gravity_get_type() -> GType;
    pub fn pango_gravity_hint_get_type() -> GType;
    pub fn pango_alignment_get_type() -> GType;
    pub fn pango_wrap_mode_get_type() -> GType;
    pub fn pango_ellipsize_mode_get_type() -> GType;
    pub fn pango_render_part_get_type() -> GType;
    pub fn pango_script_get_type() -> GType;
    pub fn pango_tab_align_get_type() -> GType;
    pub fn pango_glyph_item_get_type() -> GType;
    pub fn pango_glyph_item_split(orig: *mut PangoGlyphItem,
                                  text: *const ::libc::c_char,
                                  split_index: ::libc::c_int)
     -> *mut PangoGlyphItem;
    pub fn pango_glyph_item_copy(orig: *mut PangoGlyphItem)
     -> *mut PangoGlyphItem;
    pub fn pango_glyph_item_free(glyph_item: *mut PangoGlyphItem) -> ();
    pub fn pango_glyph_item_apply_attrs(glyph_item: *mut PangoGlyphItem,
                                        text: *const ::libc::c_char,
                                        list: *mut PangoAttrList)
     -> *mut GSList;
    pub fn pango_glyph_item_letter_space(glyph_item: *mut PangoGlyphItem,
                                         text: *const ::libc::c_char,
                                         log_attrs: *mut PangoLogAttr,
                                         letter_spacing: ::libc::c_int) -> ();
    pub fn pango_glyph_item_get_logical_widths(glyph_item:
                                                   *mut PangoGlyphItem,
                                               text: *const ::libc::c_char,
                                               logical_widths:
                                                   *mut ::libc::c_int) -> ();
    pub fn pango_glyph_item_iter_get_type() -> GType;
    pub fn pango_glyph_item_iter_copy(orig: *mut PangoGlyphItemIter)
     -> *mut PangoGlyphItemIter;
    pub fn pango_glyph_item_iter_free(iter: *mut PangoGlyphItemIter) -> ();
    pub fn pango_glyph_item_iter_init_start(iter: *mut PangoGlyphItemIter,
                                            glyph_item: *mut PangoGlyphItem,
                                            text: *const ::libc::c_char)
     -> gboolean;
    pub fn pango_glyph_item_iter_init_end(iter: *mut PangoGlyphItemIter,
                                          glyph_item: *mut PangoGlyphItem,
                                          text: *const ::libc::c_char)
     -> gboolean;
    pub fn pango_glyph_item_iter_next_cluster(iter: *mut PangoGlyphItemIter)
     -> gboolean;
    pub fn pango_glyph_item_iter_prev_cluster(iter: *mut PangoGlyphItemIter)
     -> gboolean;
    pub fn pango_tab_array_new(initial_size: gint,
                               positions_in_pixels: gboolean)
     -> *mut PangoTabArray;
    pub fn pango_tab_array_new_with_positions(size: gint,
                                              positions_in_pixels: gboolean,
                                              first_alignment: PangoTabAlign,
                                              first_position: gint, ...)
     -> *mut PangoTabArray;
    pub fn pango_tab_array_get_type() -> GType;
    pub fn pango_tab_array_copy(src: *mut PangoTabArray)
     -> *mut PangoTabArray;
    pub fn pango_tab_array_free(tab_array: *mut PangoTabArray) -> ();
    pub fn pango_tab_array_get_size(tab_array: *mut PangoTabArray) -> gint;
    pub fn pango_tab_array_resize(tab_array: *mut PangoTabArray,
                                  new_size: gint) -> ();
    pub fn pango_tab_array_set_tab(tab_array: *mut PangoTabArray,
                                   tab_index: gint, alignment: PangoTabAlign,
                                   location: gint) -> ();
    pub fn pango_tab_array_get_tab(tab_array: *mut PangoTabArray,
                                   tab_index: gint,
                                   alignment: *mut PangoTabAlign,
                                   location: *mut gint) -> ();
    pub fn pango_tab_array_get_tabs(tab_array: *mut PangoTabArray,
                                    alignments: *mut *mut PangoTabAlign,
                                    locations: *mut *mut gint) -> ();
    pub fn pango_tab_array_get_positions_in_pixels(tab_array:
                                                       *mut PangoTabArray)
     -> gboolean;
    pub fn pango_layout_get_type() -> GType;
    pub fn pango_layout_new(context: *mut PangoContext) -> *mut PangoLayout;
    pub fn pango_layout_copy(src: *mut PangoLayout) -> *mut PangoLayout;
    pub fn pango_layout_get_context(layout: *mut PangoLayout)
     -> *mut PangoContext;
    pub fn pango_layout_set_attributes(layout: *mut PangoLayout,
                                       attrs: *mut PangoAttrList) -> ();
    pub fn pango_layout_get_attributes(layout: *mut PangoLayout)
     -> *mut PangoAttrList;
    pub fn pango_layout_set_text(layout: *mut PangoLayout,
                                 text: *const ::libc::c_char,
                                 length: ::libc::c_int) -> ();
    pub fn pango_layout_get_text(layout: *mut PangoLayout)
     -> *const ::libc::c_char;
    pub fn pango_layout_get_character_count(layout: *mut PangoLayout) -> gint;
    pub fn pango_layout_set_markup(layout: *mut PangoLayout,
                                   markup: *const ::libc::c_char,
                                   length: ::libc::c_int) -> ();
    pub fn pango_layout_set_markup_with_accel(layout: *mut PangoLayout,
                                              markup: *const ::libc::c_char,
                                              length: ::libc::c_int,
                                              accel_marker: gunichar,
                                              accel_char: *mut gunichar)
     -> ();
    pub fn pango_layout_set_font_description(layout: *mut PangoLayout,
                                             desc:
                                                 *const PangoFontDescription)
     -> ();
    pub fn pango_layout_get_font_description(layout: *mut PangoLayout)
     -> *const PangoFontDescription;
    pub fn pango_layout_set_width(layout: *mut PangoLayout,
                                  width: ::libc::c_int) -> ();
    pub fn pango_layout_get_width(layout: *mut PangoLayout) -> ::libc::c_int;
    pub fn pango_layout_set_height(layout: *mut PangoLayout,
                                   height: ::libc::c_int) -> ();
    pub fn pango_layout_get_height(layout: *mut PangoLayout) -> ::libc::c_int;
    pub fn pango_layout_set_wrap(layout: *mut PangoLayout,
                                 wrap: PangoWrapMode) -> ();
    pub fn pango_layout_get_wrap(layout: *mut PangoLayout) -> PangoWrapMode;
    pub fn pango_layout_is_wrapped(layout: *mut PangoLayout) -> gboolean;
    pub fn pango_layout_set_indent(layout: *mut PangoLayout,
                                   indent: ::libc::c_int) -> ();
    pub fn pango_layout_get_indent(layout: *mut PangoLayout) -> ::libc::c_int;
    pub fn pango_layout_set_spacing(layout: *mut PangoLayout,
                                    spacing: ::libc::c_int) -> ();
    pub fn pango_layout_get_spacing(layout: *mut PangoLayout)
     -> ::libc::c_int;
    pub fn pango_layout_set_justify(layout: *mut PangoLayout,
                                    justify: gboolean) -> ();
    pub fn pango_layout_get_justify(layout: *mut PangoLayout) -> gboolean;
    pub fn pango_layout_set_auto_dir(layout: *mut PangoLayout,
                                     auto_dir: gboolean) -> ();
    pub fn pango_layout_get_auto_dir(layout: *mut PangoLayout) -> gboolean;
    pub fn pango_layout_set_alignment(layout: *mut PangoLayout,
                                      alignment: PangoAlignment) -> ();
    pub fn pango_layout_get_alignment(layout: *mut PangoLayout)
     -> PangoAlignment;
    pub fn pango_layout_set_tabs(layout: *mut PangoLayout,
                                 tabs: *mut PangoTabArray) -> ();
    pub fn pango_layout_get_tabs(layout: *mut PangoLayout)
     -> *mut PangoTabArray;
    pub fn pango_layout_set_single_paragraph_mode(layout: *mut PangoLayout,
                                                  setting: gboolean) -> ();
    pub fn pango_layout_get_single_paragraph_mode(layout: *mut PangoLayout)
     -> gboolean;
    pub fn pango_layout_set_ellipsize(layout: *mut PangoLayout,
                                      ellipsize: PangoEllipsizeMode) -> ();
    pub fn pango_layout_get_ellipsize(layout: *mut PangoLayout)
     -> PangoEllipsizeMode;
    pub fn pango_layout_is_ellipsized(layout: *mut PangoLayout) -> gboolean;
    pub fn pango_layout_get_unknown_glyphs_count(layout: *mut PangoLayout)
     -> ::libc::c_int;
    pub fn pango_layout_context_changed(layout: *mut PangoLayout) -> ();
    pub fn pango_layout_get_serial(layout: *mut PangoLayout) -> guint;
    pub fn pango_layout_get_log_attrs(layout: *mut PangoLayout,
                                      attrs: *mut *mut PangoLogAttr,
                                      n_attrs: *mut gint) -> ();
    pub fn pango_layout_get_log_attrs_readonly(layout: *mut PangoLayout,
                                               n_attrs: *mut gint)
     -> *const PangoLogAttr;
    pub fn pango_layout_index_to_pos(layout: *mut PangoLayout,
                                     index_: ::libc::c_int,
                                     pos: *mut PangoRectangle) -> ();
    pub fn pango_layout_index_to_line_x(layout: *mut PangoLayout,
                                        index_: ::libc::c_int,
                                        trailing: gboolean,
                                        line: *mut ::libc::c_int,
                                        x_pos: *mut ::libc::c_int) -> ();
    pub fn pango_layout_get_cursor_pos(layout: *mut PangoLayout,
                                       index_: ::libc::c_int,
                                       strong_pos: *mut PangoRectangle,
                                       weak_pos: *mut PangoRectangle) -> ();
    pub fn pango_layout_move_cursor_visually(layout: *mut PangoLayout,
                                             strong: gboolean,
                                             old_index: ::libc::c_int,
                                             old_trailing: ::libc::c_int,
                                             direction: ::libc::c_int,
                                             new_index: *mut ::libc::c_int,
                                             new_trailing: *mut ::libc::c_int)
     -> ();
    pub fn pango_layout_xy_to_index(layout: *mut PangoLayout,
                                    x: ::libc::c_int, y: ::libc::c_int,
                                    index_: *mut ::libc::c_int,
                                    trailing: *mut ::libc::c_int) -> gboolean;
    pub fn pango_layout_get_extents(layout: *mut PangoLayout,
                                    ink_rect: *mut PangoRectangle,
                                    logical_rect: *mut PangoRectangle) -> ();
    pub fn pango_layout_get_pixel_extents(layout: *mut PangoLayout,
                                          ink_rect: *mut PangoRectangle,
                                          logical_rect: *mut PangoRectangle)
     -> ();
    pub fn pango_layout_get_size(layout: *mut PangoLayout,
                                 width: *mut ::libc::c_int,
                                 height: *mut ::libc::c_int) -> ();
    pub fn pango_layout_get_pixel_size(layout: *mut PangoLayout,
                                       width: *mut ::libc::c_int,
                                       height: *mut ::libc::c_int) -> ();
    pub fn pango_layout_get_baseline(layout: *mut PangoLayout)
     -> ::libc::c_int;
    pub fn pango_layout_get_line_count(layout: *mut PangoLayout)
     -> ::libc::c_int;
    pub fn pango_layout_get_line(layout: *mut PangoLayout,
                                 line: ::libc::c_int) -> *mut PangoLayoutLine;
    pub fn pango_layout_get_line_readonly(layout: *mut PangoLayout,
                                          line: ::libc::c_int)
     -> *mut PangoLayoutLine;
    pub fn pango_layout_get_lines(layout: *mut PangoLayout) -> *mut GSList;
    pub fn pango_layout_get_lines_readonly(layout: *mut PangoLayout)
     -> *mut GSList;
    pub fn pango_layout_line_get_type() -> GType;
    pub fn pango_layout_line_ref(line: *mut PangoLayoutLine)
     -> *mut PangoLayoutLine;
    pub fn pango_layout_line_unref(line: *mut PangoLayoutLine) -> ();
    pub fn pango_layout_line_x_to_index(line: *mut PangoLayoutLine,
                                        x_pos: ::libc::c_int,
                                        index_: *mut ::libc::c_int,
                                        trailing: *mut ::libc::c_int)
     -> gboolean;
    pub fn pango_layout_line_index_to_x(line: *mut PangoLayoutLine,
                                        index_: ::libc::c_int,
                                        trailing: gboolean,
                                        x_pos: *mut ::libc::c_int) -> ();
    pub fn pango_layout_line_get_x_ranges(line: *mut PangoLayoutLine,
                                          start_index: ::libc::c_int,
                                          end_index: ::libc::c_int,
                                          ranges: *mut *mut ::libc::c_int,
                                          n_ranges: *mut ::libc::c_int) -> ();
    pub fn pango_layout_line_get_extents(line: *mut PangoLayoutLine,
                                         ink_rect: *mut PangoRectangle,
                                         logical_rect: *mut PangoRectangle)
     -> ();
    pub fn pango_layout_line_get_pixel_extents(layout_line:
                                                   *mut PangoLayoutLine,
                                               ink_rect: *mut PangoRectangle,
                                               logical_rect:
                                                   *mut PangoRectangle) -> ();
    pub fn pango_layout_iter_get_type() -> GType;
    pub fn pango_layout_get_iter(layout: *mut PangoLayout)
     -> *mut PangoLayoutIter;
    pub fn pango_layout_iter_copy(iter: *mut PangoLayoutIter)
     -> *mut PangoLayoutIter;
    pub fn pango_layout_iter_free(iter: *mut PangoLayoutIter) -> ();
    pub fn pango_layout_iter_get_index(iter: *mut PangoLayoutIter)
     -> ::libc::c_int;
    pub fn pango_layout_iter_get_run(iter: *mut PangoLayoutIter)
     -> *mut PangoLayoutRun;
    pub fn pango_layout_iter_get_run_readonly(iter: *mut PangoLayoutIter)
     -> *mut PangoLayoutRun;
    pub fn pango_layout_iter_get_line(iter: *mut PangoLayoutIter)
     -> *mut PangoLayoutLine;
    pub fn pango_layout_iter_get_line_readonly(iter: *mut PangoLayoutIter)
     -> *mut PangoLayoutLine;
    pub fn pango_layout_iter_at_last_line(iter: *mut PangoLayoutIter)
     -> gboolean;
    pub fn pango_layout_iter_get_layout(iter: *mut PangoLayoutIter)
     -> *mut PangoLayout;
    pub fn pango_layout_iter_next_char(iter: *mut PangoLayoutIter)
     -> gboolean;
    pub fn pango_layout_iter_next_cluster(iter: *mut PangoLayoutIter)
     -> gboolean;
    pub fn pango_layout_iter_next_run(iter: *mut PangoLayoutIter) -> gboolean;
    pub fn pango_layout_iter_next_line(iter: *mut PangoLayoutIter)
     -> gboolean;
    pub fn pango_layout_iter_get_char_extents(iter: *mut PangoLayoutIter,
                                              logical_rect:
                                                  *mut PangoRectangle) -> ();
    pub fn pango_layout_iter_get_cluster_extents(iter: *mut PangoLayoutIter,
                                                 ink_rect:
                                                     *mut PangoRectangle,
                                                 logical_rect:
                                                     *mut PangoRectangle)
     -> ();
    pub fn pango_layout_iter_get_run_extents(iter: *mut PangoLayoutIter,
                                             ink_rect: *mut PangoRectangle,
                                             logical_rect:
                                                 *mut PangoRectangle) -> ();
    pub fn pango_layout_iter_get_line_extents(iter: *mut PangoLayoutIter,
                                              ink_rect: *mut PangoRectangle,
                                              logical_rect:
                                                  *mut PangoRectangle) -> ();
    pub fn pango_layout_iter_get_line_yrange(iter: *mut PangoLayoutIter,
                                             y0_: *mut ::libc::c_int,
                                             y1_: *mut ::libc::c_int) -> ();
    pub fn pango_layout_iter_get_layout_extents(iter: *mut PangoLayoutIter,
                                                ink_rect: *mut PangoRectangle,
                                                logical_rect:
                                                    *mut PangoRectangle)
     -> ();
    pub fn pango_layout_iter_get_baseline(iter: *mut PangoLayoutIter)
     -> ::libc::c_int;
    pub fn pango_renderer_get_type() -> GType;
    pub fn pango_renderer_draw_layout(renderer: *mut PangoRenderer,
                                      layout: *mut PangoLayout,
                                      x: ::libc::c_int, y: ::libc::c_int)
     -> ();
    pub fn pango_renderer_draw_layout_line(renderer: *mut PangoRenderer,
                                           line: *mut PangoLayoutLine,
                                           x: ::libc::c_int, y: ::libc::c_int)
     -> ();
    pub fn pango_renderer_draw_glyphs(renderer: *mut PangoRenderer,
                                      font: *mut PangoFont,
                                      glyphs: *mut PangoGlyphString,
                                      x: ::libc::c_int, y: ::libc::c_int)
     -> ();
    pub fn pango_renderer_draw_glyph_item(renderer: *mut PangoRenderer,
                                          text: *const ::libc::c_char,
                                          glyph_item: *mut PangoGlyphItem,
                                          x: ::libc::c_int, y: ::libc::c_int)
     -> ();
    pub fn pango_renderer_draw_rectangle(renderer: *mut PangoRenderer,
                                         part: PangoRenderPart,
                                         x: ::libc::c_int, y: ::libc::c_int,
                                         width: ::libc::c_int,
                                         height: ::libc::c_int) -> ();
    pub fn pango_renderer_draw_error_underline(renderer: *mut PangoRenderer,
                                               x: ::libc::c_int,
                                               y: ::libc::c_int,
                                               width: ::libc::c_int,
                                               height: ::libc::c_int) -> ();
    pub fn pango_renderer_draw_trapezoid(renderer: *mut PangoRenderer,
                                         part: PangoRenderPart,
                                         y1_: ::libc::c_double,
                                         x11: ::libc::c_double,
                                         x21: ::libc::c_double,
                                         y2: ::libc::c_double,
                                         x12: ::libc::c_double,
                                         x22: ::libc::c_double) -> ();
    pub fn pango_renderer_draw_glyph(renderer: *mut PangoRenderer,
                                     font: *mut PangoFont, glyph: PangoGlyph,
                                     x: ::libc::c_double, y: ::libc::c_double)
     -> ();
    pub fn pango_renderer_activate(renderer: *mut PangoRenderer) -> ();
    pub fn pango_renderer_deactivate(renderer: *mut PangoRenderer) -> ();
    pub fn pango_renderer_part_changed(renderer: *mut PangoRenderer,
                                       part: PangoRenderPart) -> ();
    pub fn pango_renderer_set_color(renderer: *mut PangoRenderer,
                                    part: PangoRenderPart,
                                    color: *const PangoColor) -> ();
    pub fn pango_renderer_get_color(renderer: *mut PangoRenderer,
                                    part: PangoRenderPart) -> *mut PangoColor;
    pub fn pango_renderer_set_matrix(renderer: *mut PangoRenderer,
                                     matrix: *const PangoMatrix) -> ();
    pub fn pango_renderer_get_matrix(renderer: *mut PangoRenderer)
     -> *const PangoMatrix;
    pub fn pango_renderer_get_layout(renderer: *mut PangoRenderer)
     -> *mut PangoLayout;
    pub fn pango_renderer_get_layout_line(renderer: *mut PangoRenderer)
     -> *mut PangoLayoutLine;
    pub fn pango_split_file_list(str: *const ::libc::c_char)
     -> *mut *mut ::libc::c_char;
    pub fn pango_trim_string(str: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn pango_read_line(stream: *mut FILE, str: *mut GString) -> gint;
    pub fn pango_skip_space(pos: *mut *const ::libc::c_char) -> gboolean;
    pub fn pango_scan_word(pos: *mut *const ::libc::c_char, out: *mut GString)
     -> gboolean;
    pub fn pango_scan_string(pos: *mut *const ::libc::c_char,
                             out: *mut GString) -> gboolean;
    pub fn pango_scan_int(pos: *mut *const ::libc::c_char,
                          out: *mut ::libc::c_int) -> gboolean;
    pub fn pango_parse_enum(_type: GType, str: *const ::libc::c_char,
                            value: *mut ::libc::c_int, warn: gboolean,
                            possible_values: *mut *mut ::libc::c_char)
     -> gboolean;
    pub fn pango_parse_style(str: *const ::libc::c_char,
                             style: *mut PangoStyle, warn: gboolean)
     -> gboolean;
    pub fn pango_parse_variant(str: *const ::libc::c_char,
                               variant: *mut PangoVariant, warn: gboolean)
     -> gboolean;
    pub fn pango_parse_weight(str: *const ::libc::c_char,
                              weight: *mut PangoWeight, warn: gboolean)
     -> gboolean;
    pub fn pango_parse_stretch(str: *const ::libc::c_char,
                               stretch: *mut PangoStretch, warn: gboolean)
     -> gboolean;
    pub fn pango_quantize_line_geometry(thickness: *mut ::libc::c_int,
                                        position: *mut ::libc::c_int) -> ();
    pub fn pango_log2vis_get_embedding_levels(text: *const gchar,
                                              length: ::libc::c_int,
                                              pbase_dir: *mut PangoDirection)
     -> *mut guint8;
    pub fn pango_is_zero_width(ch: gunichar) -> gboolean;
    pub fn pango_version() -> ::libc::c_int;
    pub fn pango_version_string() -> *const ::libc::c_char;
    pub fn pango_version_check(required_major: ::libc::c_int,
                               required_minor: ::libc::c_int,
                               required_micro: ::libc::c_int)
     -> *const ::libc::c_char;
}
